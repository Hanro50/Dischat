plugins {
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '[6.0.36,6.2)'
  id 'com.gradleup.shadow' version '9.2.1'
}

version = mod_version
group = maven_group

base {
  archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
  // The mappings can be changed at any time and must be in the following format.
  // Channel:   Version:
  // official   MCVersion             Official field/method names from Mojang mapping files
  // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
  //
  // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
  // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
  //
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: mapping_channel, version: mapping_version

  // Forge 1.20.6 and newer use official mappings at runtime, so we shouldn't reobf from official to SRG
  reobf = false

  // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
  // In most cases, it is not necessary to enable.
  // enableEclipsePrepareRuns = true
  // enableIdeaPrepareRuns = true

  // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
  // It is REQUIRED to be set to true for this template to function.
  // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
  copyIdeResources = true

  // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
  // The folder name can be set on a run configuration using the "folderName" property.
  // By default, the folder name of a run configuration is the name of the Gradle project containing it.
  // generateRunFolders = true

  // This property enables access transformers for use in development, applied to the Minecraft artifact.
  // The access transformer file can be anywhere in the project.
  // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
  // This default location is a best practice to automatically put the file in the right place in the final jar.
  // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    // applies to all the run configs below
    configureEach {
      workingDirectory project.file('run')

      // Optional additional logging. The markers can be added/remove as needed, separated by commas.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      //  property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

      // Recommended for development - enables more descriptive errors at the cost of slower startup and registration.
      property 'eventbus.api.strictRuntimeChecks', 'true'

      // arg "-mixin.config=${mod_id}.mixins.json"
    }

    server {
      property 'forge.enabledGameTestNamespaces', mod_id
      args '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
      property 'forge.enabledGameTestNamespaces', mod_id
    }

    data {
      // example of overriding the workingDirectory set in configureEach above
      workingDirectory project.file('run-data')

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
    }
  }
}
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  dependencies {
    include(project(":core"))
    exclude(dependency(":slf4j-api"))
    exclude(dependency(":jackson-core"))
	  exclude(dependency(":jackson-databind"))
		exclude(dependency(":jackson-annotations"))
	  exclude(dependency(":gson"))
  }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  // Put repositories for dependencies here
  mavenCentral()
  maven {
    name = 'Forge'
    url = 'https://maven.minecraftforge.net'
  }
  maven {
    name = 'Minecraft libraries'
    url = 'https://libraries.minecraft.net'
  }
  exclusiveContent {
    forRepository {
      maven {
        name = 'Sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public'
      }
    }
    filter {
      includeGroupAndSubgroups('org.spongepowered')
    }
  }
}

dependencies {
  minecraftLibrary(project(":core"))
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
  annotationProcessor 'net.minecraftforge:eventbus-validator:7.0-beta.10'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Merge the resources and classes into the same directory, because Java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
  def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
  it.output.resourcesDir = dir
  it.java.destinationDirectory = dir
}
