plugins {
  id 'java-library'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.192'
}

version = mod_version
group = maven_group

base {
  archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21.9, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)


runs {
  configureEach {
    // Recommended logging data for a userdev environment
    // The markers can be added/remove as needed separated by commas.
    // "SCAN": For mods scan.
    // "REGISTRIES": For firing of registry events.
    // "REGISTRYDUMP": For getting the contents of all registries.
    systemProperty 'forge.logging.markers', 'REGISTRIES'

    // Recommended logging level for the console
    // You can set various levels here.
    // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
    systemProperty 'forge.logging.console.level', 'debug'

    modSources {
      add project.sourceSets.main
      add('core', project(':core').sourceSets.main) 
    }
  }

  server {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    argument '--nogui' 
  }

  // This run config launches GameTestServer and runs all registered gametests, then exits.
  // By default, the server will crash when no gametests are provided.
  // The gametest system is also enabled by default for other run configs under the /test command.
  gameTestServer {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
  runtimeClasspath.extendsFrom localRuntime
}

dependencies {
  implementation "net.neoforged:neoforge:${neo_version}"
  jarJar(implementation(project(path:":core",configuration:"shadow_forge")))
  implementation(project(":core"))
}


// Example configuration to allow publishing using the maven-publish plugin
publishing {
  publications {
    register('mavenJava', MavenPublication) {
      from components.java
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/repo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

